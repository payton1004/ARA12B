# import gdown
import pandas as pd
import matplotlib.pyplot as plt
import glob
import datetime
from datetime import timedelta
import numpy as np
import plotly.express as px 
import functools

print('run anom01-2.py')


cruise = 'ARA12B'

# DaDiS Fluorometer data
folder_name = 'DaDis'
subfolder_name = 'Fluorometer'
_dir='/Users/jung-ok/work1/'+cruise+'/processed/'+folder_name+'/'+subfolder_name+'/'
fname = 'FM_all_drop_duplicates.csv'

df = pd.read_csv(_dir+fname, parse_dates=[0])

df['flag'] = 1
_col = 'Fluorescence'

# z1 = '2019-08-03 00:00:00'
# z2 = '2019-08-27 23:59:59'

# df.loc[(df["UTC"] >= z1) & (df["UTC"] <= z2) & (df[_col]>0), 'flag'] = 0

# outliers
_outlier = [#0704 - 0713
# # ['2021-07-05 00:16:02','2021-07-05 01:35:02'],
# # ['2021-07-05 05:33:32','2021-07-05 07:02:02'],
# # ['2021-07-13 17:10:54','2021-07-13 19:27:24'],
# #0714 - 0723
# # ['2021-07-14 17:10:57','2021-07-14 17:14:39'],
['2021-07-15 14:20:31','2021-07-15 14:57:51'],
['2021-07-15 15:03:26','2021-07-15 15:03:51'],
['2021-07-15 15:56:16','2021-07-15 15:56:16'],
['2021-07-15 16:35:31','2021-07-15 16:35:56'],
['2021-07-15 17:06:36','2021-07-15 17:07:06'],
['2021-07-15 17:39:51','2021-07-15 17:41:36'],
['2021-07-15 17:53:31','2021-07-15 17:54:11'],
['2021-07-15 18:04:51','2021-07-15 18:06:26'],
['2021-07-15 19:54:01','2021-07-15 19:54:21'],
['2021-07-15 20:29:46','2021-07-15 20:30:21'],
['2021-07-15 20:34:56','2021-07-15 20:35:26'],
['2021-07-15 20:51:41','2021-07-15 20:52:06'],
['2021-07-15 21:07:31','2021-07-15 21:07:41'],
['2021-07-15 21:08:31','2021-07-15 21:09:26'],
['2021-07-15 21:21:31','2021-07-15 21:24:51'],
['2021-07-15 21:29:06','2021-07-15 21:29:56'],
['2021-07-15 21:38:56','2021-07-15 23:25:36'],
['2021-07-16 00:47:21','2021-07-16 00:52:06'],
['2021-07-16 01:20:26','2021-07-16 01:35:36'],
['2021-07-16 06:38:41','2021-07-16 08:38:01'],
['2021-07-16 14:48:41','2021-07-16 14:54:21'],
['2021-07-16 15:18:26','2021-07-16 15:46:41'],
['2021-07-16 16:40:11','2021-07-16 16:59:01'],
['2021-07-16 17:13:41','2021-07-16 17:20:41'],
['2021-07-16 18:14:56','2021-07-16 18:18:51'],
['2021-07-16 18:44:46','2021-07-16 18:53:51'],
['2021-07-16 20:23:16','2021-07-16 20:33:01'],
['2021-07-16 21:44:46','2021-07-16 20:45:51'],
['2021-07-16 22:09:56','2021-07-16 22:11:56'],
['2021-07-17 09:44:00','2021-07-17 11:36:45'],
['2021-07-17 16:59:25','2021-07-17 17:31:55'],
['2021-07-17 20:00:50','2021-07-17 20:32:50'],
['2021-07-18 00:35:10','2021-07-18 00:41:15'],
# # ['2021-07-16 19:15:24','2021-07-16 20:14:44'],
['2021-07-20 11:49:30','2021-07-20 11:56:20'],
['2021-07-20 13:16:05','2021-07-20 16:02:50'],
['2021-07-20 16:12:15','2021-07-20 16:28:10'],
['2021-07-20 17:58:40','2021-07-20 17:59:30'],
['2021-07-20 18:06:30','2021-07-20 18:07:25'],
['2021-07-20 18:15:45','2021-07-20 18:31:20'],
['2021-07-20 19:51:25','2021-07-20 19:55:55'],
['2021-07-20 19:59:50','2021-07-20 20:04:15'],
['2021-07-20 20:07:30','2021-07-20 20:10:45'],
['2021-07-20 21:17:40','2021-07-20 21:30:50'],
['2021-07-20 21:58:25','2021-07-20 21:58:35'],
['2021-07-20 22:04:10','2021-07-20 22:04:50'],
['2021-07-20 22:15:45','2021-07-20 22:15:55'],
# ['2021-07-21 01:20:30','2021-07-21 01:26:10'],
['2021-07-21 03:06:45','2021-07-21 03:15:15'],
['2021-07-21 03:37:25','2021-07-21 03:37:55'],
['2021-07-21 11:23:40','2021-07-21 11:27:10'],
['2021-07-21 12:27:45','2021-07-21 12:34:25'],
['2021-07-21 12:37:55','2021-07-21 12:39:55'],
['2021-07-21 12:44:50','2021-07-21 12:59:10'],
['2021-07-21 13:04:00','2021-07-21 13:19:50'],
['2021-07-21 15:34:05','2021-07-21 15:42:30'],
['2021-07-21 15:47:35','2021-07-21 15:48:40'],
['2021-07-21 15:50:30','2021-07-21 15:54:10'],
['2021-07-21 15:57:30','2021-07-21 16:15:05'],
['2021-07-21 16:22:40','2021-07-21 17:03:35'],
['2021-07-21 17:08:00','2021-07-21 17:10:00'],
['2021-07-21 18:10:50','2021-07-21 18:51:20'],
['2021-07-21 19:04:10','2021-07-21 19:08:50'],
['2021-07-21 20:01:50','2021-07-21 20:08:20'],
['2021-07-21 23:13:35','2021-07-21 23:21:35'],
['2021-07-22 10:03:24','2021-07-22 10:07:49'],
['2021-07-22 21:24:29','2021-07-22 21:28:59'],
['2021-07-22 21:48:39','2021-07-22 21:50:04'],
['2021-07-22 22:05:04','2021-07-22 22:06:39'],
['2021-07-23 00:38:39','2021-07-23 00:45:24'],
['2021-07-23 00:56:24','2021-07-23 01:07:49'],
['2021-07-23 01:12:19','2021-07-23 01:17:04'],
['2021-07-23 03:26:06','2021-07-23 03:35:29'],
['2021-07-23 14:04:59','2021-07-23 23:59:57'],
# ['2021-07-23 14:04:59','2021-07-23 14:05:14'],
# ['2021-07-23 14:18:14','2021-07-23 15:46:34'],
['2021-07-23 15:14:04','2021-07-23 15:28:39'],
# ['2021-07-23 14:23:07','2021-07-23 16:40:57'],
# ['2021-07-23 19:31:37','2021-07-23 23:59:57'],
#0724 - 0802
# ['2021-07-24 00:07:27','2021-07-24 12:05:37'], #
# ['2021-07-24 00:23:37','2021-07-24 08:20:47'],
['2021-07-24 00:00:04','2021-07-24 12:06:49'],
# ['2021-07-24 15:00:28','2021-07-24 21:19:28'], #
['2021-07-24 15:14:44','2021-07-24 15:29:04'], #
['2021-07-24 15:39:24','2021-07-24 17:07:29'], #
['2021-07-24 17:39:04','2021-07-24 17:55:09'], #
['2021-07-24 18:28:04','2021-07-24 18:43:39'], #
['2021-07-24 19:34:04','2021-07-24 19:57:19'], #
['2021-07-24 20:44:24','2021-07-24 20:46:44'], #
# ['2021-07-25 02:20:38','2021-07-25 07:07:36'],
# ['2021-07-25 02:12:58','2021-07-25 11:44:26'],
['2021-07-25 04:49:29','2021-07-25 06:05:54'],
['2021-07-25 07:02:14','2021-07-25 07:08:39'],
# ['2021-07-25 07:43:46','2021-07-25 11:40:36'],
['2021-07-25 08:23:59','2021-07-25 18:29:54'],
# ['2021-07-25 13:15:16','2021-07-25 17:40:07'],
['2021-07-25 19:27:44','2021-07-25 19:47:29'],
# ['2021-07-25 13:08:56','2021-07-25 20:27:07'],
# ['2021-07-25 17:40:17','2021-07-25 20:22:47'], #
['2021-07-25 22:20:07','2021-07-26 03:07:07'],
# ['2021-07-26 02:14:47','2021-07-26 03:07:07'],
# ['2021-07-26 07:40:25','2021-07-26 11:37:25'],
# ['2021-07-26 06:24:15','2021-07-26 12:16:15'],
# ['2021-07-26 14:03:55','2021-07-26 14:19:15'], #
# ['2021-07-26 15:51:36','2021-07-26 22:03:16'], #
# ['2021-07-27 01:51:26','2021-07-27 09:33:54'],#
# # ['2021-07-27 12:41:14','2021-07-27 16:15:54'],
# ['2021-07-27 12:41:14','2021-07-27 18:16:15'],
# ['2021-07-27 19:12:45','2021-07-28 00:16:45'],
# ['2021-07-27 22:40:55','2021-07-28 00:10:35'],
# ['2021-07-28 04:21:55','2021-07-28 04:21:09'],
# ['2021-07-28 04:28:55','2021-07-28 12:01:47'], #
# ['2021-07-28 05:35:17','2021-07-28 06:02:47'], #
['2021-07-28 06:59:38','2021-07-28 07:04:43'], #
['2021-07-28 09:49:13','2021-07-28 09:54:13'], #
['2021-07-28 10:44:18','2021-07-28 10:50:18'], #
['2021-07-28 11:25:33','2021-07-28 11:30:13'], #
['2021-07-28 11:54:18','2021-07-28 11:54:58'], #
# ['2021-07-28 07:44:37','2021-07-28 11:56:07'], #
['2021-07-28 13:54:48','2021-07-28 14:05:38'], #
['2021-07-28 14:38:53','2021-07-28 14:46:53'],
['2021-07-28 16:35:43','2021-07-28 16:38:03'],
['2021-07-28 18:42:13','2021-07-28 19:00:53'],
# ['2021-07-28 19:09:38','2021-07-28 20:52:58'],
# ['2021-07-28 19:08:28','2021-07-28 21:22:08'],
# ['2021-07-29 03:06:39','2021-07-29 03:40:09'],
# ['2021-07-29 05:10:06','2021-07-29 05:16:16'],
# ['2021-07-29 06:43:46','2021-07-29 11:00:47'], #
# ['2021-07-29 12:26:07','2021-07-29 14:34:07'], #
# ['2021-07-29 15:38:57','2021-07-29 16:02:57'],#
# ['2021-07-29 19:52:37','2021-07-29 20:24:27'],#
# ['2021-07-29 22:10:38','2021-07-29 23:55:38'],#
# ['2021-07-30 01:23:08','2021-07-30 01:40:26'], #
['2021-07-30 04:35:18','2021-07-30 04:47:38'], #
['2021-07-30 07:16:29','2021-07-30 07:25:08'], #
# ['2021-07-30 08:33:58','2021-07-30 15:34:16'], #
# ['2021-07-30 08:33:58','2021-07-30 15:40:26'], #
# ['2021-07-30 09:42:18','2021-07-30 10:52:39'], #
# ['2021-07-30 11:48:16','2021-07-30 15:33:36'], #
['2021-07-30 13:53:28','2021-07-30 14:06:28'], #
['2021-07-30 15:24:43','2021-07-30 15:42:03'], #
['2021-07-30 19:32:28','2021-07-30 21:46:38'], #
# ['2021-07-30 16:58:56','2021-07-30 22:58:37'], #
['2021-07-31 01:04:43','2021-07-31 08:11:08'],
['2021-07-31 12:00:08','2021-07-31 21:41:23'],
# ['2021-07-31 16:23:55','2021-07-31 21:40:55'],
# ['2021-08-01 02:19:08','2021-08-01 03:35:53'],
['2021-08-01 02:19:08','2021-08-01 13:36:33'],
# ['2021-08-01 13:33:13','2021-08-01 13:36:33'],
# ['2021-08-01 15:29:34','2021-08-01 19:36:04'],
['2021-08-01 15:53:03','2021-08-01 19:22:48'],
['2021-08-01 19:34:08','2021-08-01 19:44:03'],
['2021-08-01 20:15:23','2021-08-01 20:33:48'],
# ['2021-08-02 00:58:25','2021-08-02 05:10:05'],
# ['2021-08-02 01:12:35','2021-08-02 05:05:35'],
['2021-08-02 04:55:08','2021-08-02 05:01:28'],
['2021-08-02 09:13:28','2021-08-02 09:18:08'],
['2021-08-02 10:36:58','2021-08-02 10:40:28'],
# ['2021-08-02 06:34:05','2021-08-02 10:53:55'],
# ['2021-08-02 06:47:45','2021-08-02 10:43:15'],
['2021-08-02 15:28:18','2021-08-02 19:24:38'],
# ['2021-08-02 15:32:23','2021-08-02 19:27:33'],
# ['2021-08-02 20:53:53','2021-08-02 21:17:13'],
['2021-08-02 20:50:18','2021-08-02 21:15:58'],
#0803 - 0812
# ['2021-08-04 11:57:54','2021-08-04 12:35:51'],
# ['2021-08-05 12:43:40','2021-08-05 16:23:40'],
# ['2021-08-05 20:50:10','2021-08-05 20:54:37'],
# ['2021-08-07 14:10:27','2021-08-07 14:29:37'],
# ['2021-08-07 16:59:07','2021-08-07 17:59:57'],
# ['2021-08-08 03:06:45','2021-08-08 04:18:05'],
# ['2021-08-08 06:00:45','2021-08-08 07:09:55'],
['2021-08-08 15:33:38','2021-08-08 18:25:13'],
['2021-08-08 19:24:33','2021-08-08 19:25:53'],
['2021-08-08 19:38:53','2021-08-08 19:41:18'],
['2021-08-08 20:24:28','2021-08-08 20:26:48'],
# ['2021-08-08 20:49:36','2021-08-08 23:04:57'],
# ['2021-08-09 04:17:24','2021-08-09 07:32:34'],
# ['2021-08-09 04:15:14','2021-08-09 07:34:24'],
['2021-08-09 08:40:24','2021-08-09 08:54:24'],
# ['2021-08-09 10:34:05','2021-08-09 13:18:15'],
['2021-08-09 10:25:48','2021-08-09 13:16:13'],
# ['2021-08-09 21:58:15','2021-08-09 22:27:35'],
# ['2021-08-10 00:50:53','2021-08-10 02:24:13'],
# ['2021-08-10 01:10:13','2021-08-10 02:10:03'],
# ['2021-08-10 03:52:03','2021-08-10 06:52:13'],
# ['2021-08-10 03:52:03','2021-08-10 06:53:23'],
# ['2021-08-10 13:21:54','2021-08-10 18:45:44'],
# ['2021-08-10 18:57:08','2021-08-10 19:15:38'],
['2021-08-10 21:45:48','2021-08-10 22:32:38'],
# ['2021-08-10 19:49:28','2021-08-11 01:54:17'],
['2021-08-11 01:41:28','2021-08-11 01:47:38'],
# ['2021-08-11 05:28:17','2021-08-11 11:43:37'],
# ['2021-08-11 08:20:47','2021-08-11 11:43:37'],#
# ['2021-08-11 08:23:17','2021-08-11 11:36:57'],
# ['2021-08-11 12:33:28','2021-08-11 15:52:48'],#
# # ['2021-08-11 13:30:38','2021-08-11 15:37:18'],
# ['2021-08-11 20:42:38','2021-08-12 00:16:48'],
# # ['2021-08-12 03:10:26','2021-08-12 04:50:06'],
# ['2021-08-12 01:45:28','2021-08-12 04:52:26'],
# ['2021-08-12 07:47:46','2021-08-12 20:43:17'],#
# ['2021-08-12 08:46:27','2021-08-12 14:41:37'],
# ['2021-08-12 15:24:47','2021-08-12 20:31:37'],
#0813 - 0818
['2021-08-13 03:05:12','2021-08-13 11:11:13'],
# ['2021-08-13 01:41:07','2021-08-13 12:41:05'],
# ['2021-08-13 16:52:05','2021-08-13 17:25:05'],
# ['2021-08-13 18:34:35','2021-08-13 23:43:06'],
# ['2021-08-13 21:31:36','2021-08-13 22:12:36'],
# ['2021-08-14 11:28:06','2021-08-14 11:55:06'],
['2021-08-16 07:52:22','2021-08-16 09:05:02'],
['2021-08-16 15:25:36','2021-08-16 16:48:46'],
# ['2021-08-16 20:33:16','2021-08-16 22:30:07'],
['2021-08-16 20:54:02','2021-08-16 22:13:02'],
# ['2021-08-17 04:43:17','2021-08-17 05:10:17'],
# ['2021-08-17 04:43:17','2021-08-17 05:11:17'],
# ['2021-08-17 06:18:14','2021-08-17 07:53:14'],
# ['2021-08-17 14:19:05','2021-08-17 15:13:05'],
# ['2021-08-18 21:04:44','2021-08-18 23:30:04'],
# ['2021-08-19 01:57:25','2021-08-19 03:30:35'],#
['2021-08-18 23:19:26','2021-08-18 23:26:51'],
['2021-08-19 01:05:11','2021-08-19 03:26:11'],
# ['2021-08-21 09:38:25','2021-08-21 10:07:56']#
] 

for d1, d2 in _outlier:
    df['flag'][(df["UTC"] >=d1)& (df["UTC"] <= d2)]=0    

_part = df[['UTC',_col]][df['flag']==1]


def save_anomal(day1: str, df: pd.DataFrame, wp: float):
    d2 = datetime.datetime.strptime(day1, '%Y-%m-%d') + timedelta(days=9)
    day2= d2.strftime('%Y-%m-%d')
    print(day1, day2)     
    days = df[
        (df["UTC"] >= f"{day1} 00:00:00")
        & (df["UTC"] <= f"{day2} 23:59:59")
    ]
    data = days.set_index('UTC')
    column = data[_col]

    N = len(column)
    time = np.arange(0,N)
    # (len(data[50000:75000]),len(time))

    #parameters
    window_percentage = wp
    k = int(len(column) * (window_percentage/100))
    N = len(column)
    # (k,N)

    column = column.to_numpy()

    get_bands = lambda data : (np.mean(data) + 3*np.std(data),np.mean(data) - 3*np.std(data))
    #get_bands = lambda data : (np.mean(data) + np.nanquantile(data,0.99),np.mean(data) - np.nanquantile(data,0.99))

    bands = [get_bands(column[range(0 if i - k < 0 else i-k ,i + k if i + k < N else N)]) for i in range(0,N)]
    upper, lower = zip(*bands)

    # compute local outliers 
    anomalies = (column > upper) | (column < lower)
    new_df = pd.DataFrame(np.array([column, ~anomalies]).T, columns=[_col, 'flag'], index=data.index)
    fname=day1+'_'+day2+'.csv'
    # fname=input('fname = ')
    _file = '/Users/jung-ok/work1/'+cruise+'/processed/'+folder_name+'/'+subfolder_name+'/'+'chl'+'/anom01/'+fname
    new_df.to_csv(_file, na_rep=np.nan, index=True)
   

tdays = pd.date_range(start='07/04/2021', end='08/13/2021', freq='10D')
# 0 - 4 (5)
# i = 0
# i = int(input('i = '))

# window percentage
wp = 2.5
# wp = float(input('wp = '))

for i in np.arange(0,5):
    print(i)
    day = tdays[i].strftime('%Y-%m-%d')
    save_anomal(day, _part[['UTC',_col]], wp)



